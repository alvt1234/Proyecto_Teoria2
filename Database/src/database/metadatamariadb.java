
package database;
import java.sql.Connection;
import java.sql.*;
public class metadatamariadb {

    public metadatamariadb(Connection mariadb, Connection postgres) throws SQLException {
        DatabaseMetaData meta = mariadb.getMetaData();
        
        ResultSet tablas= meta.getTables(null, null, "%", new String[]{"TABLE"});
        while(tablas.next()){
            String nombretabla= tablas.getString("TABLE_NAME");
            
            Statement st=mariadb.createStatement();
            ResultSet rsddl = st.executeQuery("SHOW CREATE TABLE " + nombretabla);
            String ddlmariadb ="";
            
            if(rsddl.next()){
                ddlmariadb= rsddl.getString(2);
            }
            
            String ddlpostgres=convertir(ddlmariadb);
            try(Statement stpg= postgres.createStatement()){
                stpg.executeUpdate("DROP TABLE IF EXISTS " + nombretabla + " CASCADE");
                stpg.executeUpdate(ddlpostgres);
            }
            
            ResultSet rsdatos=st.executeQuery("SELECT * FROM " + nombretabla);
            ResultSetMetaData rsMeta = rsdatos.getMetaData();
             int columnas = rsMeta.getColumnCount();

                while (rsdatos.next()) {
                    StringBuilder insert = new StringBuilder("INSERT INTO " + nombretabla + " VALUES(");
                    for (int i = 1; i <= columnas; i++) {
                        Object val = rsdatos.getObject(i);
                        if (val == null) {
                            insert.append("NULL");
                        } else {
                            insert.append("'").append(val.toString().replace("'", "''")).append("'");
                        }
                        if (i < columnas) insert.append(",");
                    }
                    insert.append(");");

                    try (Statement stPg = postgres.createStatement()) {
                        stPg.executeUpdate(insert.toString());
                    }
        }
    }
    }
    
    
    public static String convertir(String ddlMaria){
         String ddl = ddlMaria;

        ddl = ddl.replace("`", "");
        ddl = ddl.replace("AUTO_INCREMENT", "GENERATED BY DEFAULT AS IDENTITY");
        ddl = ddl.replaceAll("ENGINE=\\w+ ", ""); 
        ddl = ddl.replaceAll("DEFAULT CHARSET=\\w+", "");
        ddl = ddl.replaceAll("unsigned", "");
        ddl = ddl.replaceAll(" int\\(", " int");
        ddl = ddl.replaceAll("tinyint\\(1\\)", "boolean");
         return ddl + ";";
    }
}
